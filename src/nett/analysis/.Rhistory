favorite_numbers <- c(50, 3, 7, 2, 8, 4, 4, 7, 13, 7, 22, 23, 7, 30, 4, 7, 12)
table(favorite_numbers)
mode(favorite_numbers)
summary(favorite_numbers)
mode.sngl(favorite_numbers)
mode.mult(favorite_numbers)
favorite_foods <- c(“pizza”, “nachos”, “salad”, “pizza”, “pizza”, “tacos”, “guacamole”, “pasta”, “soup”, “salad”, “nachos”, “rice”, “pizza”, “tacos”)
favorite_foods <- c(“pizza”, “nachos”, “salad”, “pizza”, “pizza”, “tacos”, “guacamole”, “pasta”, “soup”, “salad”, “nachos”, “rice”, “pizza”, “tacos”)
bananas <- 225
bananas * 365
bananas
5+2
9-6
2*4
6/2
4^2
346+975
37*56
1440/24
17^4
5+2
# Subtraction
9-6
range(3,4,5,6,9)
favorite_foods <- c(“pizza”, “nachos”, “salad”, “pizza”, “pizza”, “tacos”, “guacamole”, “pasta”, “soup”, “salad”, “nachos”, “rice”, “pizza”, “tacos”)
favorite_foods <- c(“pizza”, “nachos”, “salad”, “pizza”, “pizza”, “tacos”, “guacamole”, “pasta”, “soup”, “salad”, “nachos”, “rice”, “pizza”, “tacos”)
favorite_foods <- c("pizza", "nachos", "salad")
summary(favorite_foods)
numbers <- c(1,2,3)
summary(numbers)
5+2
9-6
2*4
6/2
4^2
5+2
9-6
2*4
6/2
4^2
5*82/13
mean(2,3,4,6,834,9)
paper <- 135
ink <- 15
rev_p <- 5
rev_i <- 10
(paper*rev_p) + (ink*rev_i)
march_sales <- c(835, 680, 930, 870, 815, 890, 700, 925, 830, 890)
mean(march_sales)
median(march_sales)
table(march_sales)
my_tab <- table(march_sales)
my_tab
max(my_tab)
my_tab[max(my_tab)]
march_sales <- c(835, 680, 930, 870, 815, 890, 700, 925, 830, 890)
hist(march_sales)
hist(march_sales, xlab="")
hist(march_sales, xlab="", breaks=6)
hist(march_sales, xlab="", breaks=5)
hist(march_sales, xlab="", breaks = 10
)
hist(march_sales, xlab="", breaks = c(600,650,700,750,800,850,900,950)
)
5*8/13
paper <- 125
paper * 365
paper - 10
paper <- 125
paper * 365
paper - 10
# Central Tendency
mean(8,6,7,5,3,0,9)
median(8,6,7,5,3,0,9)
# Basic Math with Variables
paper <- 125
mode(8,6,7,5,3,0,9)
table(8,6,7,5,3,0,9)
table(8,6,7,5,3,0,9)
vals <- c(8,6,7,5,3,0,9)
mean(vals)
jenny <- c(8,6,7,5,3,0,9)
# Central Tendency
mean(jenny)
median(jenny)
table(jenny)
march_sales <- c(835, 680, 930, 870, 815, 890, 700, 925, 830, 890)
# Measures of spread
max(march_sales) -min(march_sales)
sd(march_sales)
IQR(march_sales)
MARCH_SALES
summary(march_sales)
# Histogram
hist(march_sales)
hist(march_sales, main="Dunder Mifflin March Sales")
hist(march_sales,
main="Dunder Mifflin March Sales",
xlab="")
hist(march_sales,
main="Dunder Mifflin March Sales",
xlab="",
breaks=3)
hist(march_sales,
main="Dunder Mifflin March Sales",
xlab="",
breaks=20)
hist(march_sales,
main="Dunder Mifflin March Sales",
xlab="",
breaks=4)
hist(march_sales,
main="Dunder Mifflin March Sales",
xlab="",
breaks=4,
ylim=c(0,4))
hist(march_sales,
main="Dunder Mifflin March Sales",
xlab="",
breaks=4,
ylim=c(0,4),
col="red")
hist(march_sales,
main="Dunder Mifflin March Sales",
xlab="",
breaks=4,
ylim=c(0,4),
col="turquoise")
colors()
# Histogram
hist(march_sales)
hist(march_sales,
main="Dunder Mifflin March Sales",
xlab="",
breaks=4,
ylim=c(0,4),
col="turquoise")
lkdlfndf
ljbdfjsdf
data<-c(8,6,7,5,3,0,9)
boxplot(data)
boxplot(data, main="My awesome title!", col="turquoise")
evermore <- c(533, 296, 161, 133, 129, 158, 106, 92, 100, 116, 94, 108, 87, 69, 114, 121, 52)
mean(evermore)
median(evermore)
summary(evermore)
boxplot(evermore)
midnights <- c(86, 75, 128, 80, 71, 78, 62, 65, 65, 51, 67, 49, 51, 67, 49, 51, 29, 29, 26, 24, 22, 32, 21)
evermore <- c(533, 296, 161, 133, 129, 158, 106, 92, 100, 116, 94, 108, 87, 69, 114, 121, 52)
mean(evermore)
median(evermore)
library(pwr)
install.packages(pwr)
install.packages("pwr")
library(pwr)
# These are all 12-fold results (not sparse)
simclr_fast <- c(.870, .830, .810, .810, .800, .855)
simclr_slow <- c(.850, .852, .870, .886, .842, .890)
simclr_fast_ns <- c(.850, .855, .830, .820, .810, .795)
simclr_slow_ns <- c(.782, .865, .835, .840, .820, .875)
vit_fast <- c(.736, .750, .720, .726, .720, .730)
vit_slow <- c(.780, .762, .783, .775, .761, .735)
meandiff_simclr_slow_vs_fast <- abs( mean(simclr_fast) - mean(simclr_slow) )
sd_simclr_slow_vs_fast <- sqrt( (sd(simclr_fast)^2 + sd(simclr_slow)^2) /2 )
d_simclr_slow_vs_fast <- meandiff_simclr_slow_vs_fast / sd_simclr_slow_vs_fast
sd(simclr_fast)
sd(simclr_slow)
sd_simclr_slow_vs_fast <- sqrt( (2*sd(simclr_fast)^2 + 2*sd(simclr_slow)^2) / 4)
sd_simclr_slow_vs_fast <- sqrt( (2*sd(simclr_fast)^2 + 2*sd(simclr_slow)^2) / 4)
d_simclr_slow_vs_fast <- meandiff_simclr_slow_vs_fast / sd_simclr_slow_vs_fast
meandiff_simclr_slow_vs_ns_slow <- abs( mean(simclr_slow_ns) - mean(simclr_slow) )
sd_simclr_slow_vs_ns_slow <- sqrt( (2*sd(simclr_slow_ns)^2 + 2*sd(simclr_slow)^2) / 4)
d_simclr_slow_vs_ns_slow <- meandiff_simclr_slow_vs_ns_slow / sd_simclr_slow_vs_ns_slow
meandiff_simclr_slow_vs_ns_fast <- abs( mean(simclr_fast_ns) - mean(simclr_slow) )
sd_simclr_slow_vs_ns_fast <- sqrt( (2*sd(simclr_fast_ns)^2 + 2*sd(simclr_slow)^2) / 4)
d_simclr_slow_vs_ns_fast <- meandiff_simclr_slow_vs_ns_fast / sd_simclr_slow_vs_ns_fast
### vit - slow vs. fast
meandiff_vit_slow_vs_fast <- abs( mean(vit_fast) - mean(vit_slow) )
sd_vit_slow_vs_fast <- sqrt( (2*sd(vit_fast)^2 + 2*sd(vit_slow)^2) / 4)
d_vit_slow_vs_fast <- meandiff_vit_slow_vs_fast / sd_vit_slow_vs_fast
pwr_simclr_slow_vs_fast <- pwr.t.test(d=d_simclr_slow_vs_fast, sig.level=.05, power=power,
type="two.sample", alternative="two.sided")
power = 0.8
pwr_simclr_slow_vs_fast <- pwr.t.test(d=d_simclr_slow_vs_fast, sig.level=.05, power=power,
type="two.sample", alternative="two.sided")
View(pwr_simclr_slow_vs_fast)
pwr_simclr_slow_vs_ns_slow <- pwr.t.test(d=d_simclr_slow_vs_ns_slow, sig.level=.05, power=power,
type="two.sample", alternative="two.sided")
pwr_simclr_slow_vs_ns_fast <- pwr.t.test(d=d_simclr_slow_vs_ns_fast, sig.level=.05, power=power,
type="two.sample", alternative="two.sided")
pwr_vit_slow_vs_fast <- pwr.t.test(d=d_vit_slow_vs_fast, sig.level=.05, power=power,
type="two.sample", alternative="two.sided")
results <- df(condition=c("simclr slow vs fast", "simclr slow vs non-smooth slow",
"simclr slow vs non-smooth fast", "vit slow vs fast"),
mean_diff=c(meandiff_simclr_slow_vs_fast, meandiff_simclr_slow_vs_ns_slow,
meandiff_simclr_slow_vs_ns_fast, meandiff_vit_slow_vs_fast),
pooled_sd=c(sd_simclr_slow_vs_fast, sd_simclr_slow_vs_ns_slow,
sd_simclr_slow_vs_ns_fast, sd_vit_slow_vs_fast),
cohens_d=c(d_simclr_slow_vs_fast, d_simclr_slow_vs_ns_slow,
sd_simclr_slow_vs_ns_fast, d_vit_slow_vs_fast),
sample_for_power = c(pwr_simclr_slow_vs_fast$n, pwr_simclr_slow_vs_ns_slow$n,
pwr_simclr_slow_vs_ns_fast$n, pwr_vit_slow_vs_fast$n))
results <- data.frame(condition=c("simclr slow vs fast", "simclr slow vs non-smooth slow",
"simclr slow vs non-smooth fast", "vit slow vs fast"),
mean_diff=c(meandiff_simclr_slow_vs_fast, meandiff_simclr_slow_vs_ns_slow,
meandiff_simclr_slow_vs_ns_fast, meandiff_vit_slow_vs_fast),
pooled_sd=c(sd_simclr_slow_vs_fast, sd_simclr_slow_vs_ns_slow,
sd_simclr_slow_vs_ns_fast, sd_vit_slow_vs_fast),
cohens_d=c(d_simclr_slow_vs_fast, d_simclr_slow_vs_ns_slow,
sd_simclr_slow_vs_ns_fast, d_vit_slow_vs_fast),
sample_for_power = c(pwr_simclr_slow_vs_fast$n, pwr_simclr_slow_vs_ns_slow$n,
pwr_simclr_slow_vs_ns_fast$n, pwr_vit_slow_vs_fast$n))
results
# Slow & Smooth Power Analysis
# Comparisons:
### slow vs fast
### slow vs non-smooth slow
### slow vs non-smooth fast
install.packages("pwr")
library(pwr)
power = 0.8
##################################################################
########################       DATA       ########################
##################################################################
# These are all 12-fold results (not sparse)
simclr_fast <- c(.870, .830, .810, .810, .800, .855)
simclr_slow <- c(.850, .852, .870, .886, .842, .890)
simclr_fast_ns <- c(.850, .855, .830, .820, .810, .795)
simclr_slow_ns <- c(.782, .865, .835, .840, .820, .875)
vit_fast <- c(.736, .750, .720, .726, .720, .730)
vit_slow <- c(.780, .762, .783, .775, .761, .735)
##################################################################
######################       Cohen's D       #####################
##################################################################
# Compute Effect Size
### simclr - slow vs. fast
meandiff_simclr_slow_vs_fast <- abs( mean(simclr_fast) - mean(simclr_slow) )
sd_simclr_slow_vs_fast <- sqrt( (2*sd(simclr_fast)^2 + 2*sd(simclr_slow)^2) / 4)
d_simclr_slow_vs_fast <- meandiff_simclr_slow_vs_fast / sd_simclr_slow_vs_fast
### simclr - slow vs. non-smooth slow
meandiff_simclr_slow_vs_ns_slow <- abs( mean(simclr_slow_ns) - mean(simclr_slow) )
sd_simclr_slow_vs_ns_slow <- sqrt( (2*sd(simclr_slow_ns)^2 + 2*sd(simclr_slow)^2) / 4)
d_simclr_slow_vs_ns_slow <- meandiff_simclr_slow_vs_ns_slow / sd_simclr_slow_vs_ns_slow
### simclr - slow vs. non-smooth fast
meandiff_simclr_slow_vs_ns_fast <- abs( mean(simclr_fast_ns) - mean(simclr_slow) )
sd_simclr_slow_vs_ns_fast <- sqrt( (2*sd(simclr_fast_ns)^2 + 2*sd(simclr_slow)^2) / 4)
d_simclr_slow_vs_ns_fast <- meandiff_simclr_slow_vs_ns_fast / sd_simclr_slow_vs_ns_fast
### vit - slow vs. fast
meandiff_vit_slow_vs_fast <- abs( mean(vit_fast) - mean(vit_slow) )
sd_vit_slow_vs_fast <- sqrt( (2*sd(vit_fast)^2 + 2*sd(vit_slow)^2) / 4)
d_vit_slow_vs_fast <- meandiff_vit_slow_vs_fast / sd_vit_slow_vs_fast
##################################################################
########################       POWER       #######################
##################################################################
pwr_simclr_slow_vs_fast <- pwr.t.test(d=d_simclr_slow_vs_fast, sig.level=.05, power=power,
type="two.sample", alternative="two.sided")
pwr_simclr_slow_vs_ns_slow <- pwr.t.test(d=d_simclr_slow_vs_ns_slow, sig.level=.05, power=power,
type="two.sample", alternative="two.sided")
pwr_simclr_slow_vs_ns_fast <- pwr.t.test(d=d_simclr_slow_vs_ns_fast, sig.level=.05, power=power,
type="two.sample", alternative="two.sided")
pwr_vit_slow_vs_fast <- pwr.t.test(d=d_vit_slow_vs_fast, sig.level=.05, power=power,
type="two.sample", alternative="two.sided")
##################################################################
########################       RESULTS       #####################
##################################################################
results <- data.frame(condition=c("simclr slow vs fast", "simclr slow vs non-smooth slow",
"simclr slow vs non-smooth fast", "vit slow vs fast"),
mean_diff=c(meandiff_simclr_slow_vs_fast, meandiff_simclr_slow_vs_ns_slow,
meandiff_simclr_slow_vs_ns_fast, meandiff_vit_slow_vs_fast),
pooled_sd=c(sd_simclr_slow_vs_fast, sd_simclr_slow_vs_ns_slow,
sd_simclr_slow_vs_ns_fast, sd_vit_slow_vs_fast),
cohens_d=c(d_simclr_slow_vs_fast, d_simclr_slow_vs_ns_slow,
d_simclr_slow_vs_ns_fast, d_vit_slow_vs_fast),
sample_for_power = c(pwr_simclr_slow_vs_fast$n, pwr_simclr_slow_vs_ns_slow$n,
pwr_simclr_slow_vs_ns_fast$n, pwr_vit_slow_vs_fast$n))
print(results)
install.packages("argparse")
library(ggsci)
install.packages("ggsci")
library(ggsci)
install.packages("RColorBrewer")
paper <- 125
class_numbers <- c(3, 12, 4, 13, 5, 19, 17, 13)
class_numbers
class_pets <- c("dog", "dog
class_pets <- c("dog", "dog")
mean(class_numbers)
median(class_numbers)
mode(class_numbers)
table(class_numbers)
min(class_numbers)
max(class_numbers)
sd(class_numbers)
IQR(class_numbers)
summary(class_numbers)
summary(class_pets)
hist(class_numbers)
hist(class_numbers, "Class Numbers")
hist(class_numbers, main="Class Numbers")
hist(class_numbers, main="Class Numbers", xlab="Class Favorite Numbers")
hist(class_numbers,
main="Class Numbers",
xlab="Class Favorite Numbers")
hist(class_numbers,
main="Class Numbers",
xlab="Class Favorite Numbers",
breaks=c(0,3,6,9,12,15,18,21))
class_numbers <- c(3, 12, 4, 13, 5, 19, 17, 13, 3, 6, 2)
hist(class_numbers,
main="Class Numbers",
xlab="Class Favorite Numbers",
breaks=c(0,3,6,9,12,15,18,21))
hist(class_numbers,
main="Class Numbers",
xlab="Class Favorite Numbers",
breaks=c (0,3,6,9,12,15,18,21))
hist(class_numbers,
main = "Class Numbers",
xlab = "Class Favorite Numbers",
breaks = c(0, 3, 6, 9, 12, 15, 18, 21))
hist(class_numbers,
main = "Class Numbers",
xlab = "Class Favorite Numbers",
breaks = c(0, 3, 6, 9, 12, 15, 18, 21),
col = "blue")
source("NETT_test_viz.R")
setwd("/Users/samanthawood/Documents/WoodLab/AI_Papers/EmbodiedPipeline/EmbodiedAnalysis")
source("NETT_test_viz.R")
graphstyle <- "/Users/samanthawood/Documents/WoodLab/AI_Papers/EmbodiedPipeline/EmbodiedAnalysis/NETT_graphstyle.R"
View(parser)
graphstyle <- "/Users/samanthawood/Documents/WoodLab/AI_Papers/EmbodiedPipeline/EmbodiedAnalysis/NETT_graphstyle.R"
source(graphstyle)
library(tidyverse)
source(graphstyle)
chick_data <- '/Users/samanthawood/Documents/WoodLab/AI_Papers/EmbodiedPipeline/EmbodiedAnalysis/ChickData/ChickData_Parsing.csv'
# Load the chick data
chick_data <- read.csv(chick_file)
# Load the chick data
chick_data <- read.csv(chick_data)
View(chick_data)
chick_data$cond_name <- gsub("LB", "\n", chick_data$cond_name)
View(chick_data)
chick_file <- '/Users/samanthawood/Documents/WoodLab/AI_Papers/EmbodiedPipeline/EmbodiedAnalysis/ChickData/ChickData_Parsing.csv'
# Load the chick data
chick_data <- read.csv(chick_file)
chick_data$cond_name <- gsub("LB", "\n", chick_data$cond_name)
View(chick_data)
# Plot aesthetic settings ------------------------------------------------------
custom_palette <- c("#3F8CB7", "#FCEF88", "#5D5797", "#62AC6B", "#B74779")
chickred <- "#AF264A"
p <- ggplot() +
theme_classic() +
theme(axis.text.x = element_text(size = 6)) +
ylab("Percent Correct") +
xlab("Test Condition") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1), breaks=seq(0,1,.1), labels = scales::percent) +
geom_hline(yintercept = .5, linetype = 2) +
scale_fill_manual(values = custom_palette) +
scale_colour_manual(values = custom_palette) +
theme(axis.title = element_text(face="bold"),
axis.text.x = element_text(face="bold", size=8.5),
axis.text.y = element_text(face="bold", size=8.5))
rm(make_bar_charts())
rm(make_bar_charts
)
color_bars <- TRUE
View(chick_data)
p +
# Model performance: bars
{if(color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg, fill = cond_name))}+
{if(!color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg), fill = "gray45")}+
# Model performance: error bars
geom_errorbar(data = chick_data, width = 0.3,
aes(x = cond_name, ymin = avg-se, ymax = avg+se)) +
ggsave(img_name, width = 6, height = 6)
img_name <- "chick_results_parsing.png"
p +
# Model performance: bars
{if(color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg, fill = cond_name))}+
{if(!color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg), fill = "gray45")}+
# Model performance: error bars
geom_errorbar(data = chick_data, width = 0.3,
aes(x = cond_name, ymin = avg-se, ymax = avg+se))
ggsave(img_name, width = 6, height = 6)
p +
# Model performance: bars
{if(color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg, fill = cond_name))}+
{if(!color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg), fill = "gray45")}+
# Model performance: error bars
geom_errorbar(data = chick_data, width = 0.3,
aes(x = cond_name, ymin = avg-se, ymax = avg+se)) +
theme(legend.position="none")
ggsave(img_name, width = 6, height = 6)
original_order <- unique(chick_data$cond_name)
chick_data$cond_name <- factor(chick_data$cond_name, levels = original_order)
p +
# Model performance: bars
{if(color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg, fill = cond_name))}+
{if(!color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg), fill = "gray45")}+
# Model performance: error bars
geom_errorbar(data = chick_data, width = 0.3,
aes(x = cond_name, ymin = avg-se, ymax = avg+se)) +
theme(legend.position="none")
ggsave(img_name, width = 6, height = 6)
# Plot aesthetic settings ------------------------------------------------------
custom_palette <- c("#FCEF88", "#5D5797", "#3F8CB7", "#62AC6B", "#B74779")
p <- ggplot() +
theme_classic() +
theme(axis.text.x = element_text(size = 6)) +
ylab("Percent Correct") +
xlab("Test Condition") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1), breaks=seq(0,1,.1), labels = scales::percent) +
geom_hline(yintercept = .5, linetype = 2) +
scale_fill_manual(values = custom_palette) +
scale_colour_manual(values = custom_palette) +
theme(axis.title = element_text(face="bold"),
axis.text.x = element_text(face="bold", size=8.5),
axis.text.y = element_text(face="bold", size=8.5))
# Make that plot! --------------------------------------------------------------
p +
# Model performance: bars
{if(color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg, fill = cond_name))}+
{if(!color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg), fill = "gray45")}+
# Model performance: error bars
geom_errorbar(data = chick_data, width = 0.3,
aes(x = cond_name, ymin = avg-se, ymax = avg+se)) +
theme(legend.position="none")
ggsave(img_name, width = 6, height = 6)
chick_by_subj <- /Users/samanthawood/Documents/WoodLab/AI_Papers/EmbodiedPipeline/EmbodiedAnalysis/ChickData/chicks_by_subj.csv
chick_by_subj <- "/Users/samanthawood/Documents/WoodLab/AI_Papers/EmbodiedPipeline/EmbodiedAnalysis/ChickData/chicks_by_subj.csv"
# Load the chick data (by subject)
by_subj <- read.csv(chick_by_subj)
View(by_subj)
# Make that plot! --------------------------------------------------------------
p +
# Model performance: bars
{if(color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg, fill = cond_name))}+
{if(!color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg), fill = "gray45")}+
# Model performance: error bars
geom_errorbar(data = chick_data, width = 0.3,
aes(x = cond_name, ymin = avg-se, ymax = avg+se)) +
geom_jitter(data=by_subj, aes(x=cond_name, y=Performance)) +
theme(legend.position="none")
ggsave(img_name, width = 6, height = 6)
by_subj$cond_name <- gsub("LB", "\n", by_subj$cond_name)
View(by_subj)
# Plot aesthetic settings ------------------------------------------------------
custom_palette <- c("#FCEF88", "#5D5797", "#3F8CB7", "#62AC6B", "#B74779")
chickred <- "#AF264A"
p <- ggplot() +
theme_classic() +
theme(axis.text.x = element_text(size = 6)) +
ylab("Percent Correct") +
xlab("Test Condition") +
scale_y_continuous(expand = c(0, 0), limits = c(0, 1), breaks=seq(0,1,.1), labels = scales::percent) +
geom_hline(yintercept = .5, linetype = 2) +
scale_fill_manual(values = custom_palette) +
scale_colour_manual(values = custom_palette) +
theme(axis.title = element_text(face="bold"),
axis.text.x = element_text(face="bold", size=8.5),
axis.text.y = element_text(face="bold", size=8.5))
# Make that plot! --------------------------------------------------------------
p +
# Model performance: bars
{if(color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg, fill = cond_name))}+
{if(!color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg), fill = "gray45")}+
# Model performance: error bars
geom_errorbar(data = chick_data, width = 0.3,
aes(x = cond_name, ymin = avg-se, ymax = avg+se)) +
geom_jitter(data=by_subj, aes(x=cond_name, y=Performance)) +
theme(legend.position="none")
ggsave(img_name, width = 6, height = 6)
p +
# Model performance: bars
{if(color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg, fill = cond_name))}+
{if(!color_bars)geom_col(data = chick_data, width = 0.7, aes(x=cond_name, y = avg), fill = "gray45")}+
# Model performance: error bars
geom_errorbar(data = chick_data, width = 0.3,
aes(x = cond_name, ymin = avg-se, ymax = avg+se)) +
geom_jitter(data=by_subj, aes(x=cond_name, y=Performance), width = .3) +
theme(legend.position="none")
ggsave(img_name, width = 6, height = 6)
